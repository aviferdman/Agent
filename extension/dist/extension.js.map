{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\n\r\nfunction readSetting<T>(key: string, defaultValue: T): T {\r\n  const cfg = vscode.workspace.getConfiguration();\r\n  const v = cfg.get<T>(key);\r\n  return (v === undefined ? defaultValue : v) as T;\r\n}\r\n\r\nasync function sendStreamingRequest(endpoint: string, payload: any, onChunk: (t: string)=>void, token: vscode.CancellationToken) {\r\n  const url = new URL(endpoint);\r\n  const data = JSON.stringify(payload);\r\n  const lib = url.protocol === 'https:' ? https : http;\r\n\r\n  return await new Promise<void>((resolve) => {\r\n    const req = lib.request({\r\n      method: 'POST',\r\n      hostname: url.hostname,\r\n      port: url.port,\r\n      path: url.pathname + url.search,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Content-Length': Buffer.byteLength(data)\r\n      }\r\n    }, (res: http.IncomingMessage) => {\r\n      res.on('data', (d: Buffer) => {\r\n        if (token.isCancellationRequested) { req.destroy(); return; }\r\n        onChunk(d.toString());\r\n      });\r\n      res.on('end', () => resolve());\r\n    });\r\n    req.on('error', (e: Error) => { onChunk(`\\n[error] ${e.message}`); resolve(); });\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  const output = vscode.window.createOutputChannel('InternalAgent');\r\n\r\n  // Chat participant id: querypilot (invoke via @querypilot)\r\n  const participant = vscode.chat.createChatParticipant('querypilot', async (\r\n    request: vscode.chat.ChatRequest,\r\n    context: vscode.chat.ChatContext,\r\n    stream: vscode.chat.ChatResponseStream,\r\n    token: vscode.CancellationToken\r\n  ): Promise<vscode.chat.ChatResult> => {\r\n    const endpoint = readSetting('internalAgent.endpoint', 'http://127.0.0.1:8000/chat');\r\n    const maxChars = readSetting('internalAgent.maxPromptChars', 8000);\r\n    const prompt = (request.prompt || '').trim();\r\n    \r\n    if (!prompt) {\r\n      stream.markdown('*(empty prompt)*');\r\n      return {};\r\n    }\r\n    \r\n    if (prompt.length > maxChars) {\r\n      stream.markdown(`Prompt too long (${prompt.length} chars > ${maxChars})`);\r\n      return {};\r\n    }\r\n    \r\n    stream.markdown('_Contacting internal agent..._\\n');\r\n    \r\n    await sendStreamingRequest(endpoint, { message: prompt }, (chunk: string) => {\r\n      try { \r\n        stream.markdown(chunk); \r\n      } catch { \r\n        /* ignore stream errors */ \r\n      }\r\n    }, token);\r\n    \r\n    return {};\r\n  });\r\n\r\n  // Set the icon for the participant\r\n  participant.iconPath = new vscode.ThemeIcon('robot');\r\n\r\n  const cmd = vscode.commands.registerCommand('internalAgent.askSelection', async () => {\r\n    const editor = vscode.window.activeTextEditor;\r\n    const sel = editor ? editor.document.getText(editor.selection) : '';\r\n    const base = sel || '';\r\n    const question = await vscode.window.showInputBox({ prompt: 'Ask Internal Agent', value: base });\r\n    if (!question) return;\r\n    const chatApi: any = (vscode as any).chat;\r\n    if (chatApi?.requestChatAccess) {\r\n      const access = await chatApi.requestChatAccess('github.copilot');\r\n      await access.sendMessage(`@querypilot ${question}`);\r\n    } else {\r\n      vscode.window.showInformationMessage('Chat access API not available in this VS Code version. Use @querypilot manually.');\r\n    }\r\n  });\r\n  context.subscriptions.push(cmd);\r\n\r\n  const status = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);\r\n  status.text = 'IntAgent';\r\n  status.tooltip = 'Ask Internal Agent (selection aware)';\r\n  status.command = 'internalAgent.askSelection';\r\n  status.show();\r\n  context.subscriptions.push(status);\r\n\r\n  output.appendLine('Internal Agent extension activated');\r\n}\r\n\r\nexport function deactivate() {}\r\n"],
  "mappings": "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",
  "names": ["context"]
}
